// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_deuteration_single_timepoint
NumericMatrix get_deuteration_single_timepoint(NumericMatrix initial_matrix, NumericVector time_sequence, NumericVector hd_probs, NumericVector dh_probs);
RcppExport SEXP _powerHaDeX_get_deuteration_single_timepoint(SEXP initial_matrixSEXP, SEXP time_sequenceSEXP, SEXP hd_probsSEXP, SEXP dh_probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initial_matrix(initial_matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time_sequence(time_sequenceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hd_probs(hd_probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dh_probs(dh_probsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_deuteration_single_timepoint(initial_matrix, time_sequence, hd_probs, dh_probs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_powerHaDeX_get_deuteration_single_timepoint", (DL_FUNC) &_powerHaDeX_get_deuteration_single_timepoint, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_powerHaDeX(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
